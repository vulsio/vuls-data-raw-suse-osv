{
	"id": "SUSE-OU-2020:3291-1",
	"modified": "2020-11-11T11:26:43Z",
	"published": "2020-11-11T11:26:43Z",
	"related": [
		"CVE-2013-7458",
		"CVE-2015-8080",
		"CVE-2016-10517",
		"CVE-2016-8339",
		"CVE-2017-15047",
		"CVE-2018-11218",
		"CVE-2018-11219"
	],
	"summary": "Optional update for python-redis and redis",
	"details": "This optional update for python-redis and redis provides the following fixes\n\npython-redis:\n\n- Update to version to 3.4.1 (jsc#ECO-2417)\n  * Move the username argument in the Redis and Connection classes to the end of the argument list. \n    This helps those poor souls that specify all their connection options as non-keyword arguments.\n  * Prior to ACL support, redis-py ignored the username component of Connection URLs. With ACL \n    support, usernames are no longer ignored and are used to authenticate against an ACL rule. \n    Some cloud vendors with managed Redis instances (like Heroku) provide connection URLs with a\n    username component pre-ACL that is not intended to be used. Sending that username to Redis \n    servers < 6.0.0 results in an error. Attempt to detect this condition and retry the AUTH \n    command with only the password such that authentication continues to work for these users.\n  * Removed the __eq__ hooks to Redis and ConnectionPool that were added in 3.4.0. \n    This ended up being a bad idea as two separate connection pools be considered equal yet \n    manage a completely separate set of connections.\n  * Allow empty pipelines to be executed if there are WATCHed keys. This is a convenient \n    way to test if any of the watched keys changed without actually running any other commands. \n  * Removed support for end of life Python 3.4.\n  * Added support for all ACL commands in Redis 6. \n  * Pipeline instances now always evaluate to True. Prior to this change,\n    pipeline instances relied on __len__ for boolean evaluation which\n    meant that pipelines with no commands on the stack would be considered False.\n  * Client instances and Connection pools now support a 'client_name' argument. \n    If supplied, all connections created will call CLIENT SETNAME as soon as the connection is opened. \n  * Added the 'ssl_check_hostname' argument to specify whether SSL connections should require the \n    server hostname to match the hostname specified in the SSL cert. By default 'ssl_check_hostname' \n    is False for backwards compatibility. \n  * Added support for the TYPE argument to SCAN. \n  * Better thread and fork safety in ConnectionPool and BlockingConnectionPool. \n    Added better locking to synchronize critical sections rather than relying on CPython-specific implementation \n    details relating to atomic operations. Adjusted how the pools identify and deal with a fork. \n    Added a ChildDeadlockedError exception that is raised by child processes in the very unlikely chance that \n    a deadlock is encountered. \n  * Further fix for the SSLError -> TimeoutError mapping to work on obscure releases of Python 2.7.\n  * Fixed a potential error handling bug for the SSLError ->\n    TimeoutError mapping introduced in 3.3.9.\n  * Mapped Python 2.7 SSLError to TimeoutError where\n    appropriate. Timeouts should now consistently raise TimeoutErrors\n    on Python 2.7 for both unsecured and secured connections. \n  * Fixed MONITOR parsing to properly parse IPv6 client addresses\n  * Fixed a regression introduced in 3.3.0\n  * Resolve a race condition with the PubSubWorkerThread.\n  * Response callbacks are now case insensitive.\n  * Added support for hiredis-py 1.0.0 encoding error support.\n  * Add READONLY and READWRITE commands.\n  * Added extensive health checks that keep the connections lively.\n  * Many more changes, see upstream changelog.\n  * Add missing build dependency setuptools\n  * Fix SentinelConnectionPool to work in multiprocess/forked environments\n\n- Update to 3.2.0 (bsc#1131555)\n  * Added support for `select.poll` to test whether data can be read on a socket. This should allow for significantly\n    more connections to be used with pubsub. \n  * Attempt to guarentee that the ConnectionPool hands out healthy connections. Healthy connections are those that \n    have an established socket connection to the Redis server, are ready to accept a command and have no data \n    available to read. \n  * Use the socket.IPPROTO_TCP constant instead of socket.SOL_TCP. IPPROTO_TCP is available on \n    more interpreters (Jython for instance).\n  * Fixed a regression introduced in 3.0 that mishandles exceptions not derived from the base Exception class. \n    KeyboardInterrupt and gevent.timeout notable. \n  * Significant improvements to handing connections with forked processes. Parent and child processes no longer \n    trample on each others' connections.\n  * PythonParser no longer closes the associated connection's socket. The connection itself will close the socket.\n  * Connection URLs must have one of the following schemes: redis://, rediss://, unix://. \n  * Fixed an issue with retry_on_timeout logic that caused some TimeoutErrors to be retried. \n  * Added support for SNI for SSL. \n  * Fixed ConnectionPool repr for pools with no connections. \n  * Fixed GEOHASH to return a None value when specifying a place that doesn't exist on the server. \n  * Fixed XREADGROUP to return an empty dictionary for messages that have been deleted but still exist in the \n    unacknowledged queue. \n  * Added an owned method to Lock objects. owned returns a boolean indicating whether the current lock instance \n    still owns the lock.\n  * Allow lock.acquire() to accept an optional token argument. If provided, the token argument is used as the \n    unique value used to claim the lock. \n  * Added a reacquire method to Lock objects. reaquire attempts to renew the lock such that the timeout is \n    extended to the same value that the lock was initially acquired with. \n  * Stream names found within XREAD and XREADGROUP responses now properly respect the decode_responses flag.\n  * XPENDING_RANGE now requires the user the specify the min, max and count arguments. \n    Newer versions of Redis prevent count from being infinite so it's left to the user to specify these values \n    explicitly.\n  * ZADD now returns None when xx=True and incr=True and an element is specified that doesn't exist in \n    the sorted set. This matches what the server returns in this case. \n  * Added client_kill_filter that accepts various filters to identify and kill clients. \n  * Fixed a race condition that occurred when unsubscribing and resubscribing to the same channel or pattern\n    in rapid succession.\n  * Added a LockNotOwnedError that is raised when trying to extend or release a lock that is no longer owned. \n    This is a subclass of LockError so previous code should continue to work as expected. \n  * Fixed a bug in GEORADIUS that forced decoding of places without respecting the decode_responses option. \n  * add recommendation for python-hiredis\n  * Fixed regression with UnixDomainSocketConnection caused by 3.0.0.\n  * Fixed an issue with the new asynchronous flag on flushdb and flushall.\n  * Updated Lock.locked() method to indicate whether *any* process has acquired the lock, not just the \n    current one. This is in line with the behavior of threading.Lock. \n\n- Update to version 3.0.0:\n  BACKWARDS INCOMPATIBLE CHANGES\n  * When using a Lock as a context manager and the lock fails to be acquired\n    a LockError is now raised. This prevents the code block inside the context manager from being executed \n    if the lock could not be acquired.\n  * Renamed LuaLock to Lock.\n  * Removed the pipeline based Lock implementation in favor of the LuaLock implementation.\n  * Only bytes, strings and numbers (ints, longs and floats) are acceptable\n    for keys and values. Previously redis-py attempted to cast other types\n    to str() and store the result. This caused must confusion and frustration\n    when passing boolean values (cast to 'True' and 'False') or None values\n    (cast to 'None'). It is now the user's responsibility to cast all\n    key names and values to bytes, strings or numbers before passing the value to redis-py.\n  * The StrictRedis class has been renamed to Redis. StrictRedis will\n    continue to exist as an alias of Redis for the forseeable future.\n  * The legacy Redis client class has been removed. It caused much confusion to users.\n  * ZINCRBY arguments 'value' and 'amount' have swapped order to match the\n    the Redis server. The new argument order is: keyname, amount, value.\n  * MGET no longer raises an error if zero keys are passed in. Instead an empty list is returned.\n  * MSET and MSETNX now require all keys/values to be specified in a single dictionary argument named mapping. \n    This was changed to allow for future options to these commands in the future.\n  * ZADD now requires all element names/scores be specified in a single\n    dictionary argument named mapping. This was required to allow the NX, XX, CH and INCR options to be specified.\n  OTHER CHANGES\n  * Added missing DECRBY command.\n  * CLUSTER INFO and CLUSTER NODES respones are now properly decoded to strings.\n  * Added a 'locked()' method to Lock objects. This method returns True if the lock has been acquired and owned \n    by the current process, otherwise False.\n  * EXISTS now supports multiple keys. It's return value is now the number of keys in the list that exist.\n  * Ensure all commands can accept key names as bytes. This fixes issues with BLPOP, BRPOP and SORT.\n  * All errors resulting from bad user input are raised as DataError exceptions. DataError is a subclass of \n    RedisError so this should be transparent to anyone previously catching these.\n  * Added support for NX, XX, CH and INCR options to ZADD\n  * Added support for the MIGRATE command\n  * Added support for the MEMORY USAGE and MEMORY PURGE commands. \n  * Added support for the 'asynchronous' argument to FLUSHDB and FLUSHALL commands. \n  * Added support for the BITFIELD command. \n  * Improved performance on pipeline requests with large chunks of data.\n  * Fixed test suite to not fail if another client is connected to the server the tests are running against.\n  * Added support for SWAPDB.\n  * Added support for all STREAM commands.\n  * SHUTDOWN now accepts the 'save' and 'nosave' arguments. \n  * Added support for ZPOPMAX, ZPOPMIN, BZPOPMAX, BZPOPMIN. \n  * Added support for the 'type' argument in CLIENT LIST.\n  * Added support for CLIENT PAUSE. \n  * Added support for CLIENT ID and CLIENT UNBLOCK. \n  * GEODIST now returns a None value when referencing a place that does not exist. \n  * Added a ping() method to pubsub objects. \n  * Fixed a bug with keys in the INFO dict that contained ':' symbols.\n  * ssl_cert_reqs now has a default value of 'required' by default. This should make connecting to a remote \n    Redis server over SSL more secure.\n  * max_connections is now a valid querystring argument for creating connection pools from URLs. \n  * Added the UNLINK command.\n  * Added socket_type option to Connection for configurability.\n  * Lock.do_acquire now atomically sets acquires the lock and sets the expire value via set(nx=True, px=timeout).\n  * Added 'count' argument to SPOP.\n  * Fixed an issue parsing client_list respones that contained an '='.\n  * Fix rounding issues with geolocation, it is not stable enought to produce pinpoint equal \n    results among 32bit platforms\n  * Run tests by launching redis server\n  * Require redis on runtime\n\nredis:\n\n- Update to version 6.0.8 \n    (jsc#PM-1615, jsc#PM-1622, jsc#PM-1681, jsc#ECO-2867, jsc#PM-1547, jsc#CAPS-56, jsc#SLE-11578, jsc#SLE-12821)\n  * bug fixes when using with Sentinel\n  * bug fixes when using CONFIG REWRITE\n  * Remove THP warning when set to madvise\n  * Allow EXEC with read commands on readonly replica in cluster\n  * Add masters/replicas options to redis-cli --cluster call command\n  * CONFIG SET could hung the client when arrives during RDB/ROF loading\n  * LPOS command when RANK is greater than matches responded with broken protocol\n  * Add oom-score-adj configuration option to control Linux OOM killer\n  * Show IO threads statistics and status in INFO output \n  * Add optional tls verification mode (see tls-auth-clients)\n  * Fix crash when enabling CLIENT TRACKING with prefix\n  * EXEC always fails with EXECABORT and multi-state is cleared\n  * RESTORE ABSTTL won't store expired keys into the db\n  * redis-cli better handling of non-pritable key names\n  * TLS: Ignore client cert when tls-auth-clients off\n  * Tracking: fix invalidation message on flush\n  * Notify systemd on Sentinel startup\n  * Fix crash on a misuse of STRALGO\n  * Fix a few rare leaks (STRALGO error misuse, Sentinel)\n  * Fix a possible invalid access in defrag of scripts\n  * Add LPOS command to search in a list\n  * Use user+pass for MIGRATE in redis-cli and redis-benchmark in cluster mode\n  * redis-cli support TLS for --pipe, --rdb and --replica options\n  * TLS: Session caching configuration support\n  * Fix handling of speical chars in ACL LOAD\n  * Make Redis Cluster more robust about operation errors that may lead to two clusters to mix together\n  * Revert the sendfile() implementation of RDB transfer\n  * Fix TLS certificate loading for chained certificates\n  * Fix AOF rewirting of KEEPTTL SET option\n  * Fix MULTI/EXEC behavior during -BUSY script errors\n  * fix a severe replication bug introduced in Redis 6 by the 'meaningful offset' feature\n  * fix a crash introduced in 6.0.2\n  * fix to client side caching when keys are evicted from the tracking table but no notifications are sent\n  * add BR pkgconfig(libsystemd) for the rewritten systemd support and force building with it\n  * XCLAIM AOF/replicas propagation fixed.\n  * Client side caching: new NOLOOP option to avoid getting notified about changes performed by ourselves.\n  * ACL GENPASS now uses HMAC-SHA256 and have an optional 'bits' argument.  It means you can use it as a general \n    purpose 'secure random strings' primitive!\n  * Cluster 'SLOTS' subcommand memory optimization.\n  * The LCS command is now a subcommand of STRALGO.\n  * Meaningful offset for replicas as well. More successful partial resynchronizations.\n  * Optimize memory usage of deferred replies.\n  * Faster CRC64 algorithm for faster RDB loading.\n  * XINFO STREAM FULL, a new subcommand to get the whole stream state.\n  * CLIENT KILL USER <username>.\n  * MIGRATE AUTH2 option, for ACL style authentication support.\n  * use libatomic also on ppc\n  * add hash file from redis-hashes and verify it during build\n",
	"affected": [
		{
			"package": {
				"ecosystem": "SUSE:Linux Enterprise Module for Server Applications 15 SP2",
				"name": "redis",
				"purl": "purl:rpm/suse/redis&distro=SUSE%20Linux%20Enterprise%20Module%20for%20Server%20Applications%2015%20SP2"
			},
			"ranges": [
				{
					"type": "ECOSYSTEM",
					"events": [
						{
							"introduced": "0"
						},
						{
							"fixed": "6.0.8-1.3.1"
						}
					]
				}
			],
			"ecosystem_specific": {
				"binaries": [
					{
						"redis": "6.0.8-1.3.1"
					}
				]
			}
		}
	],
	"references": [
		{
			"type": "ADVISORY",
			"url": "https://www.suse.com/support/update/announcement/-2020-3291/suse-ou-20203291-1/"
		},
		{
			"type": "REPORT",
			"url": "https://bugzilla.suse.com/1002351"
		},
		{
			"type": "REPORT",
			"url": "https://bugzilla.suse.com/1047218"
		},
		{
			"type": "REPORT",
			"url": "https://bugzilla.suse.com/1061967"
		},
		{
			"type": "REPORT",
			"url": "https://bugzilla.suse.com/1064980"
		},
		{
			"type": "REPORT",
			"url": "https://bugzilla.suse.com/1097430"
		},
		{
			"type": "REPORT",
			"url": "https://bugzilla.suse.com/1131555"
		},
		{
			"type": "REPORT",
			"url": "https://bugzilla.suse.com/798455"
		},
		{
			"type": "REPORT",
			"url": "https://bugzilla.suse.com/835815"
		},
		{
			"type": "REPORT",
			"url": "https://bugzilla.suse.com/991250"
		},
		{
			"type": "WEB",
			"url": "https://www.suse.com/security/cve/CVE-2013-7458"
		},
		{
			"type": "WEB",
			"url": "https://www.suse.com/security/cve/CVE-2015-8080"
		},
		{
			"type": "WEB",
			"url": "https://www.suse.com/security/cve/CVE-2016-10517"
		},
		{
			"type": "WEB",
			"url": "https://www.suse.com/security/cve/CVE-2016-8339"
		},
		{
			"type": "WEB",
			"url": "https://www.suse.com/security/cve/CVE-2017-15047"
		},
		{
			"type": "WEB",
			"url": "https://www.suse.com/security/cve/CVE-2018-11218"
		},
		{
			"type": "WEB",
			"url": "https://www.suse.com/security/cve/CVE-2018-11219"
		}
	]
}
