{
	"id": "SUSE-SU-2020:0790-1",
	"modified": "2020-03-25T12:24:49Z",
	"published": "2020-03-25T12:24:49Z",
	"related": [
		"CVE-2018-10903"
	],
	"summary": "Security update for python-cffi, python-cryptography, python-xattr",
	"details": "This update for python-cffi, python-cryptography and python-xattr fixes the following issues:\n\nSecurity issue fixed:\n\n- CVE-2018-10903: Fixed GCM tag forgery via truncated tag in finalize_with_tag API (bsc#1101820).\n\nNon-security issues fixed:\n\npython-cffi was updated to 1.11.2 (bsc#1138748, jsc#ECO-1256, jsc#PM-1598):\n\n- fixed a build failure on i586 (bsc#1111657)\n- Salt was unable to highstate in snapshot 20171129 (bsc#1070737)\n\n- Update pytest in spec to add c directory tests in addition to \n  testing directory.\n\nUpdate to 1.11.1:\n\n* Fix tests, remove deprecated C API usage\n* Fix (hack) for 3.6.0/3.6.1/3.6.2 giving incompatible binary\n  extensions (cpython issue #29943)\n* Fix for 3.7.0a1+\n\nUpdate to 1.11.0:\n\n* Support the modern standard types char16_t and char32_t. These\n  work like wchar_t: they represent one unicode character, or when\n  used as charN_t * or charN_t[] they represent a unicode string.\n  The difference with wchar_t is that they have a known, fixed\n  size. They should work at all places that used to work with\n  wchar_t (please report an issue if I missed something). Note\n  that with set_source(), you need to make sure that these types\n  are actually defined by the C source you provide (if used in\n  cdef()).\n* Support the C99 types float _Complex and double _Complex. Note\n  that libffi doesn't support them, which means that in the ABI\n  mode you still cannot call C functions that take complex\n  numbers directly as arguments or return type.\n* Fixed a rare race condition when creating multiple FFI instances\n  from multiple threads. (Note that you aren't meant to create\n  many FFI instances: in inline mode, you should write\n  ffi = cffi.FFI() at module level just after import cffi; and in\n  out-of-line mode you don't instantiate FFI explicitly at all.)\n* Windows: using callbacks can be messy because the CFFI internal\n  error messages show up to stderr-but stderr goes nowhere in many\n  applications. This makes it particularly hard to get started\n  with the embedding mode. (Once you get started, you can at least\n  use @ffi.def_extern(onerror=...) and send the error logs where\n  it makes sense for your application, or record them in log\n  files, and so on.) So what is new in CFFI is that now, on\n  Windows CFFI will try to open a non-modal MessageBox (in addition\n  to sending raw messages to stderr). The MessageBox is only\n  visible if the process stays alive: typically, console\n  applications that crash close immediately, but that is also the\n  situation where stderr should be visible anyway.\n* Progress on support for callbacks in NetBSD.\n* Functions returning booleans would in some case still return 0\n  or 1 instead of False or True. Fixed.\n* ffi.gc() now takes an optional third parameter, which gives an\n  estimate of the size (in bytes) of the object. So far, this is\n  only used by PyPy, to make the next GC occur more quickly\n  (issue #320). In the future, this might have an effect on\n  CPython too (provided the CPython issue 31105 is addressed).\n* Add a note to the documentation: the ABI mode gives function\n  objects that are slower to call than the API mode does. For\n  some reason it is often thought to be faster. It is not!\n\nUpdate to 1.10.1:\n\n* Fixed the line numbers reported in case of cdef() errors. Also,\n  I just noticed, but pycparser always supported the preprocessor\n  directive # 42 'foo.h' to mean 'from the next line, we're in\n  file foo.h starting from line 42';, which it puts in the error\n  messages. \n\nUpdate to 1.10.0:\n\n Issue #295: use calloc() directly instead of PyObject_Malloc()+memset()\n to handle ffi.new() with a default allocator. Speeds up ffi.new(large-array)\n where most of the time you never touch most of the array.\n* Some OS/X build fixes ('only with Xcode but without CLT';).\n* Improve a couple of error messages: when getting mismatched versions of\n  cffi and its backend; and when calling functions which cannot be called with\n  libffi because an argument is a struct that is 'too complicated'; (and not\n  a struct pointer, which always works).\n* Add support for some unusual compilers (non-msvc, non-gcc, non-icc, non-clang)\n* Implemented the remaining cases for ffi.from_buffer. Now all\n  buffer/memoryview objects can be passed. The one remaining check is against\n  passing unicode strings in Python 2. (They support the buffer interface, but\n  that gives the raw bytes behind the UTF16/UCS4 storage, which is most of the\n  times not what you expect. In Python 3 this has been fixed and the unicode\n  strings don't support the memoryview interface any more.)\n* The C type _Bool or bool now converts to a Python boolean when reading,\n  instead of the content of the byte as an integer. The potential\n  incompatibility here is what occurs if the byte contains a value different\n  from 0 and 1. Previously, it would just return it; with this change, CFFI\n  raises an exception in this case. But this case means 'undefined behavior';\n  in C; if you really have to interface with a library relying on this,\n  don't use bool in the CFFI side. Also, it is still valid to use a byte\n  string as initializer for a bool[], but now it must only contain \\x00 or\n  \\x01. As an aside, ffi.string() no longer works on bool[] (but it never made\n  much sense, as this function stops at the first zero).\n* ffi.buffer is now the name of cffi's buffer type, and ffi.buffer() works\n  like before but is the constructor of that type.\n* ffi.addressof(lib, 'name') now works also in in-line mode, not only in\n  out-of-line mode. This is useful for taking the address of global variables.\n* Issue #255: cdata objects of a primitive type (integers, floats, char) are\n  now compared and ordered by value. For example, <cdata 'int' 42> compares\n  equal to 42 and <cdata 'char' b'A'> compares equal to b'A'. Unlike C,\n  <cdata 'int' -1> does not compare equal to ffi.cast('unsigned int', -1): it\n  compares smaller, because -1 < 4294967295.\n* PyPy: ffi.new() and ffi.new_allocator()() did not record 'memory pressure';,\n  causing the GC to run too infrequently if you call ffi.new() very often\n  and/or with large arrays. Fixed in PyPy 5.7.\n* Support in ffi.cdef() for numeric expressions with + or -. Assumes that\n  there is no overflow; it should be fixed first before we add more general\n  support for arbitrary arithmetic on constants.\n\nUpdate to 1.9.1:\n\n- Structs with variable-sized arrays as their last field: now we track the\n  length of the array after ffi.new() is called, just like we always tracked\n  the length of ffi.new('int[]', 42). This lets us detect out-of-range\n  accesses to array items. This also lets us display a better repr(), and\n  have the total size returned by ffi.sizeof() and ffi.buffer(). Previously\n  both functions would return a result based on the size of the declared\n  structure type, with an assumed empty array. (Thanks andrew for starting\n  this refactoring.)\n- Add support in cdef()/set_source() for unspecified-length arrays in\n  typedefs: typedef int foo_t[...];. It was already supported for global\n  variables or structure fields.\n- I turned in v1.8 a warning from cffi/model.py into an error: 'enum xxx' has\n  no values explicitly defined: refusing to guess which integer type it is\n  meant to be (unsigned/signed, int/long). Now I'm turning it back to a\n  warning again; it seems that guessing that the enum has size int is a\n  99%-safe bet. (But not 100%, so it stays as a warning.)\n- Fix leaks in the code handling FILE * arguments. In CPython 3 there is a\n  remaining issue that is hard to fix: if you pass a Python file object to a\n  FILE * argument, then os.dup() is used and the new file descriptor is only\n  closed when the GC reclaims the Python file object-and not at the earlier\n  time when you call close(), which only closes the original file descriptor.\n  If this is an issue, you should avoid this automatic convertion of Python\n  file objects: instead, explicitly manipulate file descriptors and call\n  fdopen() from C (...via cffi).\n- When passing a void * argument to a function with a different pointer type,\n  or vice-versa, the cast occurs automatically, like in C. The same occurs\n  for initialization with ffi.new() and a few other places. However, I\n  thought that char * had the same property-but I was mistaken. In C you get\n  the usual warning if you try to give a char * to a char ** argument, for\n  example. Sorry about the confusion. This has been fixed in CFFI by giving\n  for now a warning, too. It will turn into an error in a future version.\n- Issue #283: fixed ffi.new() on structures/unions with nested anonymous\n  structures/unions, when there is at least one union in the mix. When\n  initialized with a list or a dict, it should now behave more closely like\n  the { } syntax does in GCC.\n- CPython 3.x: experimental: the generated C extension modules now use the\n  'limited API';, which means that, as a compiled .so/.dll, it should work\n  directly on any version of CPython >= 3.2. The name produced by distutils\n  is still version-specific. To get the version-independent name, you can\n  rename it manually to NAME.abi3.so, or use the very recent setuptools 26.\n- Added ffi.compile(debug=...), similar to python setup.py build --debug but\n  defaulting to True if we are running a debugging version of Python itself.\n- Removed the restriction that ffi.from_buffer() cannot be used on byte\n  strings. Now you can get a char * out of a byte string, which is valid as\n  long as the string object is kept alive. (But don't use it to modify the\n  string object! If you need this, use bytearray or other official\n  techniques.)\n- PyPy 5.4 can now pass a byte string directly to a char * argument (in older\n  versions, a copy would be made). This used to be a CPython-only\n  optimization.\n- ffi.gc(p, None) removes the destructor on an object previously created by\n  another call to ffi.gc()\n- bool(ffi.cast('primitive type', x)) now returns False if the value is zero\n  (including -0.0), and True otherwise. Previously this would only return\n  False for cdata objects of a pointer type when the pointer is NULL.\n- bytearrays: ffi.from_buffer(bytearray-object) is now supported. (The reason\n  it was not supported was that it was hard to do in PyPy, but it works since\n  PyPy 5.3.) To call a C function with a char * argument from a buffer\n  object-now including bytearrays—you write lib.foo(ffi.from_buffer(x)).\n  Additionally, this is now supported: p[0:length] = bytearray-object. The\n  problem with this was that a iterating over bytearrays gives numbers\n  instead of characters. (Now it is implemented with just a memcpy, of\n  course, not actually iterating over the characters.)\n- C++: compiling the generated C code with C++ was supposed to work, but\n  failed if you make use the bool type (because that is rendered as the C\n  _Bool type, which doesn't exist in C++).\n- help(lib) and help(lib.myfunc) now give useful information, as well as\n  dir(p) where p is a struct or pointer-to-struct.\n\n- Fixed the 'negative left shift' warning by replacing bitshifting\n  in appropriate places by bitwise and comparison to self; patch\n  taken from upstream git. Drop cffi-1.5.2-wnoerror.patch: no\n  longer required.\n\n- disable 'negative left shift' warning in test suite to prevent\n  failures with gcc6, until upstream fixes the undefined code\n  in question (bsc#981848)\n\nUpdate to version 1.6.0:\n\n* ffi.list_types()\n* ffi.unpack()\n* extern 'Python+C';\n* in API mode, lib.foo.__doc__ contains the C signature now.\n* Yet another attempt at robustness of ffi.def_extern() against\n  CPython's interpreter shutdown logic.\n\nUpdate to 1.5.2:\n\n* support for cffi-based embedding\n* more robustness for shutdown logic\n\n\nUpdated python-cryptography to 2.1.4 (bsc#1138748, jsc#ECO-1256, jsc#PM-1598)\n\n- Make this version of the package compatible with OpenSSL 1.1.1d (bsc#1149792)\n\n- CVE-2018-10903: Fixed GCM tag forgery via truncated tag in\n  finalize_with_tag API (bsc#1101820)\n\nUpdate to version 2.1.4:\n\n* Added X509_up_ref for an upcoming pyOpenSSL release.\n* Corrected a bug with the manylinux1 wheels where OpenSSL's stack\n  was marked executable.\n* support for OpenSSL 1.0.0 has been removed.\n* Added support for Diffie-Hellman key exchange\n* The OS random engine for OpenSSL has been rewritten\n\npython-xattr was just rebuilt to adjust its cffi depedency.\n",
	"affected": [
		{
			"package": {
				"ecosystem": "SUSE:OpenStack Cloud 6-LTSS",
				"name": "python-cryptography",
				"purl": "purl:rpm/suse/python-cryptography&distro=SUSE%20OpenStack%20Cloud%206-LTSS"
			},
			"ranges": [
				{
					"type": "ECOSYSTEM",
					"events": [
						{
							"introduced": "0"
						},
						{
							"fixed": "2.1.4-3.15.5"
						}
					]
				}
			],
			"ecosystem_specific": {
				"binaries": [
					{
						"python-cryptography": "2.1.4-3.15.5"
					}
				]
			}
		},
		{
			"package": {
				"ecosystem": "SUSE:Linux Enterprise Server for SAP Applications 12 SP1",
				"name": "python-cffi",
				"purl": "purl:rpm/suse/python-cffi&distro=SUSE%20Linux%20Enterprise%20Server%20for%20SAP%20Applications%2012%20SP1"
			},
			"ranges": [
				{
					"type": "ECOSYSTEM",
					"events": [
						{
							"introduced": "0"
						},
						{
							"fixed": "1.11.2-2.19.2"
						}
					]
				}
			],
			"ecosystem_specific": {
				"binaries": [
					{
						"python-cffi": "1.11.2-2.19.2",
						"python-cryptography": "2.1.4-3.15.5",
						"python-xattr": "0.7.5-3.2.1",
						"python3-cffi": "1.11.2-2.19.2",
						"python3-cryptography": "2.1.4-3.15.5"
					}
				]
			}
		},
		{
			"package": {
				"ecosystem": "SUSE:Linux Enterprise Server for SAP Applications 12 SP1",
				"name": "python-cryptography",
				"purl": "purl:rpm/suse/python-cryptography&distro=SUSE%20Linux%20Enterprise%20Server%20for%20SAP%20Applications%2012%20SP1"
			},
			"ranges": [
				{
					"type": "ECOSYSTEM",
					"events": [
						{
							"introduced": "0"
						},
						{
							"fixed": "2.1.4-3.15.5"
						}
					]
				}
			],
			"ecosystem_specific": {
				"binaries": [
					{
						"python-cffi": "1.11.2-2.19.2",
						"python-cryptography": "2.1.4-3.15.5",
						"python-xattr": "0.7.5-3.2.1",
						"python3-cffi": "1.11.2-2.19.2",
						"python3-cryptography": "2.1.4-3.15.5"
					}
				]
			}
		},
		{
			"package": {
				"ecosystem": "SUSE:Linux Enterprise Server for SAP Applications 12 SP1",
				"name": "python-xattr",
				"purl": "purl:rpm/suse/python-xattr&distro=SUSE%20Linux%20Enterprise%20Server%20for%20SAP%20Applications%2012%20SP1"
			},
			"ranges": [
				{
					"type": "ECOSYSTEM",
					"events": [
						{
							"introduced": "0"
						},
						{
							"fixed": "0.7.5-3.2.1"
						}
					]
				}
			],
			"ecosystem_specific": {
				"binaries": [
					{
						"python-cffi": "1.11.2-2.19.2",
						"python-cryptography": "2.1.4-3.15.5",
						"python-xattr": "0.7.5-3.2.1",
						"python3-cffi": "1.11.2-2.19.2",
						"python3-cryptography": "2.1.4-3.15.5"
					}
				]
			}
		},
		{
			"package": {
				"ecosystem": "SUSE:Linux Enterprise Server 12 SP1-LTSS",
				"name": "python-cffi",
				"purl": "purl:rpm/suse/python-cffi&distro=SUSE%20Linux%20Enterprise%20Server%2012%20SP1-LTSS"
			},
			"ranges": [
				{
					"type": "ECOSYSTEM",
					"events": [
						{
							"introduced": "0"
						},
						{
							"fixed": "1.11.2-2.19.2"
						}
					]
				}
			],
			"ecosystem_specific": {
				"binaries": [
					{
						"python-cffi": "1.11.2-2.19.2",
						"python-cryptography": "2.1.4-3.15.5",
						"python-xattr": "0.7.5-3.2.1",
						"python3-cffi": "1.11.2-2.19.2",
						"python3-cryptography": "2.1.4-3.15.5"
					}
				]
			}
		},
		{
			"package": {
				"ecosystem": "SUSE:Linux Enterprise Server 12 SP1-LTSS",
				"name": "python-cryptography",
				"purl": "purl:rpm/suse/python-cryptography&distro=SUSE%20Linux%20Enterprise%20Server%2012%20SP1-LTSS"
			},
			"ranges": [
				{
					"type": "ECOSYSTEM",
					"events": [
						{
							"introduced": "0"
						},
						{
							"fixed": "2.1.4-3.15.5"
						}
					]
				}
			],
			"ecosystem_specific": {
				"binaries": [
					{
						"python-cffi": "1.11.2-2.19.2",
						"python-cryptography": "2.1.4-3.15.5",
						"python-xattr": "0.7.5-3.2.1",
						"python3-cffi": "1.11.2-2.19.2",
						"python3-cryptography": "2.1.4-3.15.5"
					}
				]
			}
		},
		{
			"package": {
				"ecosystem": "SUSE:Linux Enterprise Server 12 SP1-LTSS",
				"name": "python-xattr",
				"purl": "purl:rpm/suse/python-xattr&distro=SUSE%20Linux%20Enterprise%20Server%2012%20SP1-LTSS"
			},
			"ranges": [
				{
					"type": "ECOSYSTEM",
					"events": [
						{
							"introduced": "0"
						},
						{
							"fixed": "0.7.5-3.2.1"
						}
					]
				}
			],
			"ecosystem_specific": {
				"binaries": [
					{
						"python-cffi": "1.11.2-2.19.2",
						"python-cryptography": "2.1.4-3.15.5",
						"python-xattr": "0.7.5-3.2.1",
						"python3-cffi": "1.11.2-2.19.2",
						"python3-cryptography": "2.1.4-3.15.5"
					}
				]
			}
		}
	],
	"references": [
		{
			"type": "ADVISORY",
			"url": "https://www.suse.com/support/update/announcement/2020/suse-su-20200790-1/"
		},
		{
			"type": "REPORT",
			"url": "https://bugzilla.suse.com/1055478"
		},
		{
			"type": "REPORT",
			"url": "https://bugzilla.suse.com/1070737"
		},
		{
			"type": "REPORT",
			"url": "https://bugzilla.suse.com/1101820"
		},
		{
			"type": "REPORT",
			"url": "https://bugzilla.suse.com/1111657"
		},
		{
			"type": "REPORT",
			"url": "https://bugzilla.suse.com/1138748"
		},
		{
			"type": "REPORT",
			"url": "https://bugzilla.suse.com/1149792"
		},
		{
			"type": "REPORT",
			"url": "https://bugzilla.suse.com/981848"
		},
		{
			"type": "WEB",
			"url": "https://www.suse.com/security/cve/CVE-2018-10903"
		}
	]
}
